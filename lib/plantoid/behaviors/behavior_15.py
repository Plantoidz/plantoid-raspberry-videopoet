#import lib.plantoid.behaviors.behavior_library as behavior_library
from lib.plantoid.behaviors import behavior_library
from plantoids.plantoid import Plantony
import lib.plantoid.eden as eden


import os
from dotenv import load_dotenv
from pinata import Pinata
load_dotenv()

PINATA_API_KEY = os.environ.get("PINATA_API_KEY")
PINATA_API_SECRET = os.environ.get("PINATA_API_SECRET")
PINATA_JWT = os.environ.get('PINATA_JWT')



def ingurgitate_crypto(plantoid: Plantony, network, tID, amount):
    print("trying to get the oracle library........")


    # do weaving
    plantoid.weaving()
        
    # listen for audio
    audiofile = plantoid.listen()
        
    # generate, print, and read the oracle
    oracle = behavior_library.generate_oracle(plantoid, network, audiofile, tID, amount)

    # print oracle on the LP printer
    behavior_library.print_oracle(plantoid, network, tID, oracle)

    # read oracle out loud
    behavior_library.read_oracle(plantoid, network, tID, oracle)



def create_seed_metadata(plantoid: Plantony, network, token_Id):

    movie_path = None
    animurl = None

    # create the metadata information

    db = dict()
    db['name'] = token_Id
    db['description'] = "Plantoid #15 - Seed #" + token_Id
    db['external_url'] = "http://plantoid.org"
    db['image'] = "https://ipfs.io/ipfs/QmRcrcn4X6QfSwFnJQ1dNHn8YgW7pbmm6BjZn7t8FW7WFV" # ipfsQpng


    # check if a movie exists for that particular token_Id

    path = network.plantoid_path
    if os.path.exists(path + "/videos/" + network.name + "/" + token_Id +"_movie.mp4"):
        movie_path = path + "/videos/" + network.name + "/" + token_Id +"_movie.mp4"

    elif os.path.isfile(path + "/sermons/" + network.name + "/" + token_Id + "_sermon.mp3"):

        # if movie doesn't exist, but sermon.mp3 exists, make a new movie based on the recorded audio:

        plantoid.send_serial_message("thinking")


        # launch the API call which will return the video generated by Eden
        # only if failsafe is not set (if set, it will recycle an existing movie).
    
        if(network.failsafe  == 0):

            print('generating video file with eden')

            init_img = "https://edenartlab-prod-data.s3.us-east-1.amazonaws.com/44050c3ab6e427ca6fa851f1a66cfe7dcacd996818d05bd09395f1e3790ad91c.jpg"
            init_strength = 0
            movie_path = behavior_library.create_video_from_audio(path, token_Id, network.name, init_img, init_strength)

        
        elif(network.failsafe == 1 or movie_path == None):
            
            print('using failsafe, using fallback')
            #print("PlantoidEden.make_eden_API_call return Null -- going to use a fallback video !")
            movie_path = behavior_library.fallback_video(path, token_Id, network.name)
        
        
        movie_path = behavior_library.make_video(path, movie_path, token_Id, network.name)


    animurl = behavior_library.pin_movie(movie_path)
    
    if(animurl):  ## only upload metadata if there is an associated video
        behavior_library.record_metadata(plantoid, network, token_Id, db, animurl)

    plantoid.send_serial_message("awake") ## REMOVE





